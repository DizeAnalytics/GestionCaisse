from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from gestion_caisses.models import Caisse, Membre, Depense
from decimal import Decimal
import random
from datetime import date, timedelta
from django.db import models


class Command(BaseCommand):
    help = 'Cr√©e des d√©penses d\'exemple pour tester le syst√®me'

    def add_arguments(self, parser):
        parser.add_argument(
            '--nombre',
            type=int,
            default=10,
            help='Nombre de d√©penses √† cr√©er (d√©faut: 10)'
        )

    def handle(self, *args, **options):
        nombre_depenses = options['nombre']
        
        # V√©rifier qu'il y a des caisses et des membres
        if not Caisse.objects.exists():
            self.stdout.write(
                self.style.ERROR('‚ùå Aucune caisse trouv√©e. Cr√©ez d\'abord des caisses.')
            )
            return
        
        if not Membre.objects.exists():
            self.stdout.write(
                self.style.ERROR('‚ùå Aucun membre trouv√©. Cr√©ez d\'abord des membres.')
            )
            return
        
        # R√©cup√©rer les caisses et membres existants
        caisses = list(Caisse.objects.all())
        membres = list(Membre.objects.all())
        
        # Cat√©gories de d√©penses
        categories = ['SOLIDARITE', 'PENALITE', 'AUTRE']
        
        # Statuts possibles
        statuts = ['EN_COURS', 'APPROUVEE', 'REJETEE', 'TERMINEE']
        
        # Descriptions d'exemple
        descriptions_solidarite = [
            "Aide m√©dicale pour membre malade",
            "Soutien financier famille en difficult√©",
            "Achat de m√©dicaments pour membre",
            "Transport pour consultation m√©dicale",
            "Aide alimentaire d'urgence"
        ]
        
        descriptions_penalite = [
            "P√©nalit√© retard remboursement pr√™t",
            "Amende pour absence aux r√©unions",
            "P√©nalit√© pour non-respect des r√®gles",
            "Sanction pour retard de cotisation"
        ]
        
        descriptions_autre = [
            "Achat de mat√©riel de bureau",
            "Frais de transport pour r√©union",
            "Achat de fournitures",
            "Frais de communication",
            "Maintenance √©quipements"
        ]
        
        depenses_crees = 0
        
        for i in range(nombre_depenses):
            # S√©lectionner al√©atoirement une caisse et un membre
            caisse = random.choice(caisses)
            responsable = random.choice([m for m in membres if m.caisse == caisse])
            
            # S√©lectionner une cat√©gorie
            categorie = random.choice(categories)
            
            # G√©n√©rer une description appropri√©e
            if categorie == 'SOLIDARITE':
                description = random.choice(descriptions_solidarite)
            elif categorie == 'PENALITE':
                description = random.choice(descriptions_penalite)
            else:
                description = random.choice(descriptions_autre)
            
            # G√©n√©rer un montant r√©aliste
            if categorie == 'SOLIDARITE':
                montant = random.choice([5000, 10000, 15000, 20000, 25000])
            elif categorie == 'PENALITE':
                montant = random.choice([1000, 2000, 3000, 5000])
            else:
                montant = random.choice([2000, 5000, 8000, 12000, 15000])
            
            # G√©n√©rer une date al√©atoire dans les 6 derniers mois
            jours_aleatoires = random.randint(0, 180)
            date_depense = date.today() - timedelta(days=jours_aleatoires)
            
            # S√©lectionner un statut (plus de probabilit√© pour EN_COURS et APPROUVEE)
            statut = random.choices(
                statuts, 
                weights=[0.4, 0.4, 0.1, 0.1]
            )[0]
            
            # Cr√©er la d√©pense
            depense = Depense.objects.create(
                caisse=caisse,
                categorie=categorie,
                montant=Decimal(montant),
                description=description,
                justificatif=f"Justificatif pour {description.lower()}",
                date_depense=date_depense,
                responsable=responsable,
                statut=statut
            )
            
            # Si la d√©pense est approuv√©e, ajouter des notes d'approbation
            if statut == 'APPROUVEE':
                depense.notes_approbation = "D√©pense approuv√©e par le comit√© de gestion"
                depense.save()
            
            depenses_crees += 1
            
            self.stdout.write(
                f"‚úÖ D√©pense cr√©√©e: {depense.caisse.nom_association} - "
                f"{depense.montant} FCFA ({depense.get_categorie_display()})"
            )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\nüéâ {depenses_crees} d√©penses ont √©t√© cr√©√©es avec succ√®s !'
            )
        )
        
        # Afficher un r√©sum√©
        total_solidarite = Depense.objects.filter(categorie='SOLIDARITE').aggregate(
            total=models.Sum('montant')
        )['total'] or 0
        
        total_penalites = Depense.objects.filter(categorie='PENALITE').aggregate(
            total=models.Sum('montant')
        )['total'] or 0
        
        total_autre = Depense.objects.filter(categorie='AUTRE').aggregate(
            total=models.Sum('montant')
        )['total'] or 0
        
        self.stdout.write(f"\nüìä R√©sum√© des d√©penses cr√©√©es:")
        self.stdout.write(f"   üí∞ Solidarit√©: {total_solidarite:,.0f} FCFA")
        self.stdout.write(f"   ‚ö†Ô∏è  P√©nalit√©s: {total_penalites:,.0f} FCFA")
        self.stdout.write(f"   üìù Autres: {total_autre:,.0f} FCFA")
        self.stdout.write(f"   üéØ Total: {total_solidarite + total_penalites + total_autre:,.0f} FCFA")
